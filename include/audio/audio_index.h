#pragma once

// Auto-generated PCM audio index
// DO NOT EDIT - Generated by tools/audio_to_pcm_header.py

#include <cstdint>
#include <cstddef>
#include <cstring>

#include "00001.h"
#include "00002.h"
#include "00003.h"
#include "00004.h"
#include "00005.h"
#include "00006.h"
#include "00007.h"
#include "00008.h"
#include "00009.h"
#include "00010.h"
#include "00011.h"
#include "00012.h"
#include "00013.h"
#include "00014.h"
#include "00015.h"
#include "00016.h"
#include "00017.h"
#include "00018.h"
#include "00019.h"
#include "00020.h"
#include "00021.h"
#include "00022.h"
#include "00023.h"
#include "00024.h"

namespace Exterminate {
namespace Audio {

// Audio format constants
constexpr uint32_t AUDIO_SAMPLE_RATE = 22050;
constexpr uint8_t AUDIO_CHANNELS = 1;
constexpr uint8_t AUDIO_BIT_DEPTH = 16;

// PCM audio file registry
struct AudioFile {
    const char* name;
    const int16_t* data;
    size_t sample_count;
    size_t byte_size;
    uint32_t sample_rate;
    uint8_t channels;
    uint8_t bit_depth;
};

// Available audio files
extern const AudioFile AUDIO_FILES[];
extern const size_t AUDIO_FILE_COUNT;

// Audio file indices for easy access
enum class AudioIndex : size_t {
    AUDIO_00001 = 0,
    AUDIO_00002 = 1,
    AUDIO_00003 = 2,
    AUDIO_00004 = 3,
    AUDIO_00005 = 4,
    AUDIO_00006 = 5,
    AUDIO_00007 = 6,
    AUDIO_00008 = 7,
    AUDIO_00009 = 8,
    AUDIO_00010 = 9,
    AUDIO_00011 = 10,
    AUDIO_00012 = 11,
    AUDIO_00013 = 12,
    AUDIO_00014 = 13,
    AUDIO_00015 = 14,
    AUDIO_00016 = 15,
    AUDIO_00017 = 16,
    AUDIO_00018 = 17,
    AUDIO_00019 = 18,
    AUDIO_00020 = 19,
    AUDIO_00021 = 20,
    AUDIO_00022 = 21,
    AUDIO_00023 = 22,
    AUDIO_00024 = 23,
    COUNT = 24
};

// Helper functions
const AudioFile* getAudioFile(AudioIndex index);
const AudioFile* getAudioFile(const char* name);

} // namespace Audio
} // namespace Exterminate

// Implementation
namespace Exterminate {
namespace Audio {

const AudioFile AUDIO_FILES[] = {
    {"00001.mp3", AUDIO_00001_DATA, AUDIO_00001_SAMPLE_COUNT, AUDIO_00001_BYTE_SIZE, 
     AUDIO_00001_SAMPLE_RATE, AUDIO_00001_CHANNELS, AUDIO_00001_BIT_DEPTH},
    {"00002.mp3", AUDIO_00002_DATA, AUDIO_00002_SAMPLE_COUNT, AUDIO_00002_BYTE_SIZE, 
     AUDIO_00002_SAMPLE_RATE, AUDIO_00002_CHANNELS, AUDIO_00002_BIT_DEPTH},
    {"00003.mp3", AUDIO_00003_DATA, AUDIO_00003_SAMPLE_COUNT, AUDIO_00003_BYTE_SIZE, 
     AUDIO_00003_SAMPLE_RATE, AUDIO_00003_CHANNELS, AUDIO_00003_BIT_DEPTH},
    {"00004.mp3", AUDIO_00004_DATA, AUDIO_00004_SAMPLE_COUNT, AUDIO_00004_BYTE_SIZE, 
     AUDIO_00004_SAMPLE_RATE, AUDIO_00004_CHANNELS, AUDIO_00004_BIT_DEPTH},
    {"00005.mp3", AUDIO_00005_DATA, AUDIO_00005_SAMPLE_COUNT, AUDIO_00005_BYTE_SIZE, 
     AUDIO_00005_SAMPLE_RATE, AUDIO_00005_CHANNELS, AUDIO_00005_BIT_DEPTH},
    {"00006.mp3", AUDIO_00006_DATA, AUDIO_00006_SAMPLE_COUNT, AUDIO_00006_BYTE_SIZE, 
     AUDIO_00006_SAMPLE_RATE, AUDIO_00006_CHANNELS, AUDIO_00006_BIT_DEPTH},
    {"00007.mp3", AUDIO_00007_DATA, AUDIO_00007_SAMPLE_COUNT, AUDIO_00007_BYTE_SIZE, 
     AUDIO_00007_SAMPLE_RATE, AUDIO_00007_CHANNELS, AUDIO_00007_BIT_DEPTH},
    {"00008.mp3", AUDIO_00008_DATA, AUDIO_00008_SAMPLE_COUNT, AUDIO_00008_BYTE_SIZE, 
     AUDIO_00008_SAMPLE_RATE, AUDIO_00008_CHANNELS, AUDIO_00008_BIT_DEPTH},
    {"00009.mp3", AUDIO_00009_DATA, AUDIO_00009_SAMPLE_COUNT, AUDIO_00009_BYTE_SIZE, 
     AUDIO_00009_SAMPLE_RATE, AUDIO_00009_CHANNELS, AUDIO_00009_BIT_DEPTH},
    {"00010.mp3", AUDIO_00010_DATA, AUDIO_00010_SAMPLE_COUNT, AUDIO_00010_BYTE_SIZE, 
     AUDIO_00010_SAMPLE_RATE, AUDIO_00010_CHANNELS, AUDIO_00010_BIT_DEPTH},
    {"00011.mp3", AUDIO_00011_DATA, AUDIO_00011_SAMPLE_COUNT, AUDIO_00011_BYTE_SIZE, 
     AUDIO_00011_SAMPLE_RATE, AUDIO_00011_CHANNELS, AUDIO_00011_BIT_DEPTH},
    {"00012.mp3", AUDIO_00012_DATA, AUDIO_00012_SAMPLE_COUNT, AUDIO_00012_BYTE_SIZE, 
     AUDIO_00012_SAMPLE_RATE, AUDIO_00012_CHANNELS, AUDIO_00012_BIT_DEPTH},
    {"00013.mp3", AUDIO_00013_DATA, AUDIO_00013_SAMPLE_COUNT, AUDIO_00013_BYTE_SIZE, 
     AUDIO_00013_SAMPLE_RATE, AUDIO_00013_CHANNELS, AUDIO_00013_BIT_DEPTH},
    {"00014.mp3", AUDIO_00014_DATA, AUDIO_00014_SAMPLE_COUNT, AUDIO_00014_BYTE_SIZE, 
     AUDIO_00014_SAMPLE_RATE, AUDIO_00014_CHANNELS, AUDIO_00014_BIT_DEPTH},
    {"00015.mp3", AUDIO_00015_DATA, AUDIO_00015_SAMPLE_COUNT, AUDIO_00015_BYTE_SIZE, 
     AUDIO_00015_SAMPLE_RATE, AUDIO_00015_CHANNELS, AUDIO_00015_BIT_DEPTH},
    {"00016.mp3", AUDIO_00016_DATA, AUDIO_00016_SAMPLE_COUNT, AUDIO_00016_BYTE_SIZE, 
     AUDIO_00016_SAMPLE_RATE, AUDIO_00016_CHANNELS, AUDIO_00016_BIT_DEPTH},
    {"00017.mp3", AUDIO_00017_DATA, AUDIO_00017_SAMPLE_COUNT, AUDIO_00017_BYTE_SIZE, 
     AUDIO_00017_SAMPLE_RATE, AUDIO_00017_CHANNELS, AUDIO_00017_BIT_DEPTH},
    {"00018.mp3", AUDIO_00018_DATA, AUDIO_00018_SAMPLE_COUNT, AUDIO_00018_BYTE_SIZE, 
     AUDIO_00018_SAMPLE_RATE, AUDIO_00018_CHANNELS, AUDIO_00018_BIT_DEPTH},
    {"00019.mp3", AUDIO_00019_DATA, AUDIO_00019_SAMPLE_COUNT, AUDIO_00019_BYTE_SIZE, 
     AUDIO_00019_SAMPLE_RATE, AUDIO_00019_CHANNELS, AUDIO_00019_BIT_DEPTH},
    {"00020.mp3", AUDIO_00020_DATA, AUDIO_00020_SAMPLE_COUNT, AUDIO_00020_BYTE_SIZE, 
     AUDIO_00020_SAMPLE_RATE, AUDIO_00020_CHANNELS, AUDIO_00020_BIT_DEPTH},
    {"00021.mp3", AUDIO_00021_DATA, AUDIO_00021_SAMPLE_COUNT, AUDIO_00021_BYTE_SIZE, 
     AUDIO_00021_SAMPLE_RATE, AUDIO_00021_CHANNELS, AUDIO_00021_BIT_DEPTH},
    {"00022.mp3", AUDIO_00022_DATA, AUDIO_00022_SAMPLE_COUNT, AUDIO_00022_BYTE_SIZE, 
     AUDIO_00022_SAMPLE_RATE, AUDIO_00022_CHANNELS, AUDIO_00022_BIT_DEPTH},
    {"00023.mp3", AUDIO_00023_DATA, AUDIO_00023_SAMPLE_COUNT, AUDIO_00023_BYTE_SIZE, 
     AUDIO_00023_SAMPLE_RATE, AUDIO_00023_CHANNELS, AUDIO_00023_BIT_DEPTH},
    {"00024.mp3", AUDIO_00024_DATA, AUDIO_00024_SAMPLE_COUNT, AUDIO_00024_BYTE_SIZE, 
     AUDIO_00024_SAMPLE_RATE, AUDIO_00024_CHANNELS, AUDIO_00024_BIT_DEPTH},
};

const size_t AUDIO_FILE_COUNT = 24;

const AudioFile* getAudioFile(AudioIndex index) {
    if (static_cast<size_t>(index) >= AUDIO_FILE_COUNT) {
        return nullptr;
    }
    return &AUDIO_FILES[static_cast<size_t>(index)];
}

const AudioFile* getAudioFile(const char* name) {
    for (size_t i = 0; i < AUDIO_FILE_COUNT; ++i) {
        if (strcmp(AUDIO_FILES[i].name, name) == 0) {
            return &AUDIO_FILES[i];
        }
    }
    return nullptr;
}

} // namespace Audio
} // namespace Exterminate
