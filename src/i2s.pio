;
; i2s.pio - I2S PIO programs for RP2040
;
; Adapted from malacalypse/rp2040_i2s_example for Exterminate project
; Original Copyright (c) 2022 Daniel Collins - GPL v3
; This adaptation follows our project's copilot instructions and SOLID principles
;

.program i2s_sck
; System clock (master clock) output
; Outputs a square wave at the configured clock rate
; Used when the I2S peripheral requires a master clock signal
public start:
    set pins, 1    [1]
    set pins, 0    [1]
    jmp start

.program i2s_out_master
; I2S output master mode - generates BCK and LRCK signals
; Outputs audio data with proper I2S timing
; Generates 32-bit frames (left/right) regardless of bit depth
public start:
    pull block              ; Get word from DMA
    set pins, 0   [1]      ; LRCK low (left channel)
    mov x, osr             ; Move data to X for bit manipulation
    set y, 30              ; 31 bits to shift (32-bit frame - 1)
shift_left:
    out pins, 1   [0]      ; Output data bit
    jmp y--, shift_left [0] ; Continue shifting
    out pins, 1   [0]      ; Output final bit
    
    pull block              ; Get next word
    set pins, 1   [1]      ; LRCK high (right channel)  
    mov x, osr             ; Move data to X
    set y, 30              ; 31 bits to shift
shift_right:
    out pins, 1   [0]      ; Output data bit
    jmp y--, shift_right [0] ; Continue shifting
    out pins, 1   [0]      ; Output final bit
    jmp start

.program i2s_in_slave
; I2S input slave mode - receives data using external clocks
; Synchronizes to external BCK and LRCK signals
; Receives 32-bit frames and passes to DMA
public start:
    wait 0 pin 0           ; Wait for LRCK low (left channel)
    set y, 30              ; 31 bits to receive
    mov isr, null          ; Clear input register
left_shift:
    wait 1 pin 1           ; Wait for BCK rising edge
    in pins, 1             ; Shift in data bit
    wait 0 pin 1           ; Wait for BCK falling edge
    jmp y--, left_shift    ; Continue for all bits
    wait 1 pin 1           ; Final bit
    in pins, 1
    wait 0 pin 1
    push block             ; Send left channel to DMA
    
    wait 1 pin 0           ; Wait for LRCK high (right channel)
    set y, 30              ; 31 bits to receive
    mov isr, null          ; Clear input register
right_shift:
    wait 1 pin 1           ; Wait for BCK rising edge
    in pins, 1             ; Shift in data bit
    wait 0 pin 1           ; Wait for BCK falling edge
    jmp y--, right_shift   ; Continue for all bits
    wait 1 pin 1           ; Final bit
    in pins, 1
    wait 0 pin 1
    push block             ; Send right channel to DMA
    jmp start

.program i2s_bidi_slave
; Bidirectional I2S slave mode - both input and output
; Uses external clocks for both directions
; More complex but supports full-duplex operation
public start:
    ; This is a simplified bidirectional slave
    ; In practice, this would be more complex and might
    ; require separate state machines for input/output
    wait 0 pin 0           ; Wait for LRCK low
    pull noblock           ; Try to get output data
    mov pins, osr          ; Output if available
    wait 1 pin 0           ; Wait for LRCK high
    pull noblock           ; Try to get output data
    mov pins, osr          ; Output if available
    jmp start

% c-sdk {
#include "hardware/clocks.h"

// Helper function to calculate clock dividers
static inline float pio_div_calc(float target_freq) {
    float clk = (float)clock_get_hz(clk_sys);
    return clk / target_freq;
}

// I2S SCK (system clock) initialization
static inline void i2s_sck_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = i2s_sck_program_get_default_config(offset);
    
    // Set pin as output for system clock
    sm_config_set_set_pins(&c, pin, 1);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    
    // No autopull/autopush needed for clock generation
    sm_config_set_clkdiv(&c, 2.0); // Will be overridden by actual calculation
    
    pio_sm_init(pio, sm, offset, &c);
}

// I2S master output initialization  
static inline void i2s_out_master_program_init(PIO pio, uint sm, uint offset, 
                                              uint bit_depth, uint dout_pin, uint clock_pin_base) {
    pio_sm_config c = i2s_out_master_program_get_default_config(offset);
    
    // Set up data output pin
    sm_config_set_out_pins(&c, dout_pin, 1);
    pio_gpio_init(pio, dout_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, dout_pin, 1, true);
    
    // Set up clock pins (BCK and LRCK)
    sm_config_set_set_pins(&c, clock_pin_base, 2);
    pio_gpio_init(pio, clock_pin_base);     // BCK
    pio_gpio_init(pio, clock_pin_base + 1); // LRCK
    pio_sm_set_consecutive_pindirs(pio, sm, clock_pin_base, 2, true);
    
    // Configure for 32-bit words, left-shift
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    
    pio_sm_init(pio, sm, offset, &c);
}

// I2S slave input initialization
static inline void i2s_in_slave_program_init(PIO pio, uint sm, uint offset, uint din_pin) {
    pio_sm_config c = i2s_in_slave_program_get_default_config(offset);
    
    // Set up data input pin
    sm_config_set_in_pins(&c, din_pin);
    pio_gpio_init(pio, din_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, din_pin, 1, false);
    
    // Configure for 32-bit words, left-shift
    sm_config_set_in_shift(&c, false, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    
    pio_sm_init(pio, sm, offset, &c);
}

// Bidirectional slave initialization
static inline void i2s_bidi_slave_program_init(PIO pio, uint sm, uint offset, 
                                              uint dout_pin, uint din_pin) {
    pio_sm_config c = i2s_bidi_slave_program_get_default_config(offset);
    
    // This is a simplified implementation
    // Real bidirectional would need more complex setup
    sm_config_set_out_pins(&c, dout_pin, 1);
    sm_config_set_in_pins(&c, din_pin);
    
    pio_gpio_init(pio, dout_pin);
    pio_gpio_init(pio, din_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, dout_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, din_pin, 1, false);
    
    pio_sm_init(pio, sm, offset, &c);
}

// Define constants for PIO multipliers (from original example)
#define i2s_sck_program_pio_mult 2
#define i2s_out_master_program_pio_mult 2
#define i2s_in_slave_program_pio_mult 2

%}
